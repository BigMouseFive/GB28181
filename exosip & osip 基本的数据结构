＃exosip & osip 基本的数据结构

/**
 * Structure for referencing a node in a osip_list_t element.
 * @var __node_t
 */
  typedef struct __node __node_t;

/**
 * Structure for referencing a node in a osip_list_t element.
 * @struct __node
 */
  struct __node {
    __node_t *next;         /**< next __node_t containing element */
    void *element;          /**< element in Current node */
  };
#endif

/**
 * Structure for referencing a list of elements.
 * @var osip_list_t
 */
  typedef struct osip_list osip_list_t;

/**
 * Structure used to iterate list.
 * @var osip_list_iterator_t
 */
  typedef struct {
    __node_t *actual; /**< actual */
    __node_t **prev;  /**< prev */
    osip_list_t *li;  /**< li */
    int pos;          /**< pos */
  } osip_list_iterator_t;

/**
 * Structure for referencing a list of elements.
 * @struct osip_list
 */
  struct osip_list {

    int nb_elt;                 /**< Number of element in the list */
    __node_t *node;             /**< Next node containing element  */

  };
  
  
  /**
 * Structure for SIP Message (REQUEST and RESPONSE).
 * @var osip_message_t
 */
  typedef struct osip_message osip_message_t;

/**
 * Structure for SIP Message (REQUEST and RESPONSE).
 * @struct osip_message
 */
  struct osip_message {
    char *sip_version;                            /**< SIP version (SIP request only) */
    osip_uri_t *req_uri;                          /**< Request-Uri (SIP request only) */
    char *sip_method;                             /**< METHOD (SIP request only) */

    int status_code;                              /**< Status Code (SIP answer only) */
    char *reason_phrase;                          /**< Reason Phrase (SIP answer only) */

#ifndef MINISIZE
    osip_list_t accepts;                          /**< Accept headers */
    osip_list_t accept_encodings;                 /**< Accept-Encoding headers */
    osip_list_t accept_languages;                 /**< Accept-Language headers */
    osip_list_t alert_infos;                      /**< Alert-Info headers */
    osip_list_t allows;                           /**< Allows headers */
    osip_list_t authentication_infos;             /**< authentication_info headers */
#endif
    osip_list_t authorizations;                   /**< Authorizations headers */
    osip_call_id_t *call_id;                      /**< Call-ID header */
    osip_list_t call_infos;                       /**< Call-Infos header */
    osip_list_t contacts;                         /**< Contacts headers */
#ifndef MINISIZE
    osip_list_t content_encodings;                /**< Content-Encodings headers */
#endif
    osip_content_length_t *content_length;        /**< Content-Length header */
    osip_content_type_t *content_type;            /**< Content-Type header */
    osip_cseq_t *cseq;                            /**< CSeq header */
#ifndef MINISIZE
    osip_list_t error_infos;                      /**< Error-Info headers */
#endif
    osip_from_t *from;                            /**< From header */
    osip_mime_version_t *mime_version;            /**< Mime-Version header */
    osip_list_t proxy_authenticates;              /**< Proxy-Authenticate headers */
#ifndef MINISIZE
    osip_list_t proxy_authentication_infos;       /**< P-Authentication-Info headers */
#endif
    osip_list_t proxy_authorizations;             /**< Proxy-authorization headers */
    osip_list_t record_routes;                    /**< Record-Route headers */
    osip_list_t routes;                           /**< Route headers */
    osip_to_t *to;                                /**< To header */
    osip_list_t vias;                             /**< Vias headers */
    osip_list_t www_authenticates;                /**< WWW-Authenticate headers */

    osip_list_t headers;                          /**< Other headers */

    osip_list_t bodies;                           /**< List of attachements */

    /*
       1: structure and buffer "message" are identical.
       2: buffer "message" is not up to date with the structure info (call osip_message_to_str to update it).
     */
    int message_property;                         /**< internal value */
    char *message;                                /**< internal value */
    size_t message_length;                        /**< internal value */

    void *application_data;                       /**< can be used by upper layer*/
  };

/**
 * Structure for Authorization headers.
 * @var osip_authorization_t
 */
  typedef struct osip_authorization osip_authorization_t;

/**
 * Definition of the Authorization header.
 * @struct osip_authorization
 */
  struct osip_authorization
  {
    char *auth_type;		/**< Authentication Type (Basic or Digest) */
    char *username;		/**< login */
    char *realm;		/**< realm (as a quoted-string) */
    char *nonce;		/**< nonce */
    char *uri;  		/**< uri */
    char *response;		/**< response */
    char *digest;		/**< digest */
    char *algorithm;		/**< algorithm (optionnal) */
    char *cnonce;		/**< cnonce (optionnal) */
    char *opaque;		/**< opaque (optionnal) */
    char *message_qop;		/**< message_qop (optionnal) */
    char *nonce_count;		/**< nonce_count (optionnal) */
    char *version;		/**< version (optional - NTLM) */
    char *targetname;		/**< targetname (optional - NTLM) */
    char *gssapi_data;		/**< gssapi-data (optional - NTLM) */
    char *crand;
	  char *cnum;
    char *auth_param;		/**< other parameters (optionnal) */
  };
  
  
  struct osip_transaction
  {
    void *your_instance;    /**< User Defined Pointer. */
    int transactionid;      /**Transaction Identifier. */
    osip_fifo_t *transactionff; /events必须放入这个fifo */

    osip_via_t *topvia;        /**< CALL-LEG definition (Top Via) */
    osip_from_t *from;        /**< CALL-LEG definition (From)    */
    osip_to_t *to;              /**< CALL-LEG definition (To)      */
    osip_call_id_t *callid;     /**< CALL-LEG definition (Call-ID) */
    osip_cseq_t *cseq;          /**< CALL-LEG definition (CSeq)    */

    osip_message_t *orig_request;  /**< Initial request */
    osip_message_t *last_response; /**< Last response */
    osip_message_t *ack;       /**< ack request sent */

    state_t state;        /*< Current state of the transaction */

    time_t birth_time;      /**< birth date of transaction */
    time_t completed_time;  /**< end date of transaction */

    int in_socket;  /**< Optional socket for incoming message */
    int out_socket;  /**< Optional place for outgoing message */

    void *config; /**@internal transaction is managed by osip_t  */

    osip_fsm_type_t ctx_type;   /**< Type of the transaction */
    osip_ict_t *ict_context;    /**@internal */
    osip_ist_t *ist_context;    /**@internal */
    osip_nict_t *nict_context;  /**@internal */
    osip_nist_t *nist_context;  /**@internal */
  };
